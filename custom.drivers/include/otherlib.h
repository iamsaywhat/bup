/***********************************************************************************************************

    otherlib - Модуль общесистемных платфомозависимых функций.
						 
    Содержит настройки тактирования, функции работы с таймерами, АЦП, конфигурации портов.
		Так как модуль управляет настройками тактирования, и использует их, он чувствителен
		к любым изменениям аппаратного тактового генератора и несанкционированным
		конфигурациям тактирования. 
		
		Примечания:
    В настоящий момент модуль осуществляет настройку системной шины HCLK на 80 МГЦ (при HSE = 8 МГц).
	  Функции настройки таймеров опираются на данную частоту.
		SysTick - Реализует отсчет системного времени с дискретностью 1 мс.
		
		Краткое описание функционала:
		* Clock_initialize     - Настройка тактирования процессора на 80 МГЦ (при HSE = 8 МГц);
		* SysTick_initialize   - Инициализация SysTick таймера на отсчет системного времени с дискретностью 1 мс;
		* Pin_initialize       - Функция конфигурации отдельных пинов порта;
		* Pin_default          - Сброс конфигурации пина;
		* Pin_set              - Установить пин в состояние 1
		* Pin_reset            - Установить пин в состояние 0
		* Pin_read             - Чтение состояния на входе пина
		* ADC_initialize       - Инициализация АЦП;
		* Timer_initialize     - Инициализация таймера на прерывания с заданной дискретностью
		* delay_us             - Задержка в микросекундах;
		* delay_ms             - Задержка в милисекундах;
		* getCurrentSystemTime - Запрос системного времени (количество милисекунд с момента включения);
		* setTimeout           - Установить величину таймаута
		* timeoutStatus        - Запрос статуса таймаута
		* ADC_getResult        - Запрос результата преобразования с канала АЦП;
    
		Примеры использования:
		1) Таймаут контроль:
		
		TimeoutType timeout;                            // Объявление специального типа
		setTimeout(&timeout, 10);                       // Устанавливаем таймаут на 10мс
		while(timeoutStatus(&timeout) != TIME_IS_UP)    // Пока таймаута нет, делаем что-то
		{
		  ***doing something***
		}
		
***********************************************************************************************************/
#ifndef _OTHERLIB_H_
#define _OTHERLIB_H_

#include <stdint.h>
#include "MDR32F9Qx_timer.h"
#include "bupboard.h"


#define uSECOND_TICKS     80           /* Количество тиков тактового сигнала при 80 МГц соответствующие 1 микросекунде */
#define mSECOND_TICKS     80000        /* Количество тиков тактового сигнала при 80 МГц соответствующие 1 миллисекунде */
#define  SECOND_TICKS     80000000     /* Количество тиков тактового сигнала при 80 МГц соответствующие 1 секунде */


typedef enum{ 
  FAILED = 0, 
  PASSED = !FAILED
}OperationStatus; 

typedef enum{
  TIME_IS_UP,             /* Время вышло */
  TIME_IS_NOT_UP          /* Время еще не вышло */
}TimeoutStatus;

typedef struct{
  uint64_t       start;   /* Время начала отсчёта, мс */
  uint64_t       stop;    /* Время когда случится таймаут, мс */
  TimeoutStatus  status;  /* Статус таймаута */
}TimeoutType;


/****************************************************************************************
  SysTick_initialize - Инициализация SysTick таймера с периодом прерывания 1 мс
                  при частоте тактирования 80МГц
****************************************************************************************/
void SysTick_initialize(void);

/****************************************************************************************
  SysTick_InterruptFunction - Функция для размещения в функции прерывания SysTick
****************************************************************************************/
void SysTick_InterruptFunction(void);

/****************************************************************************************
  getCurrentSystemTime - Узнать системное время (милисекунды с момента включения)
  Возвращает:
            Системное время в милисекундах с момента включения
****************************************************************************************/
uint64_t getCurrentSystemTime(void);

/****************************************************************************************
  setTimeout - Установить таймаут в милисекундах
  Параметры:
            timeout     - Указатель на структуру
            millisecond - Величина таймаута в милисекундах
****************************************************************************************/
void setTimeout (TimeoutType* timeout, uint32_t millisecond);

/****************************************************************************************
  timeoutStatus - Проверить истекло ли время ожидания
  Параметры:
            timeout - Указатель на структуру
  Возвращает:
            Статус таймаута
****************************************************************************************/
TimeoutStatus timeoutStatus(TimeoutType* timeout);

/**************************************************************************************************************
  delay_ms - Функция задержки в мс
  Параметры:
            ms - Величина задержки в милисекундах
**************************************************************************************************************/
void delay_ms(uint32_t ms);

/**************************************************************************************************************
  delay_us - Функция задержки в мкс
  Параметры:
            us - Величина задержки в микросекундах
**************************************************************************************************************/
void delay_us(uint32_t us);

/**************************************************************************************************************
  Pin_initialize - Функция конфигурации отдельных пинов порта
  Параметры:
            pin - Структура с настройками пина
***************************************************************************************************************/
void Pin_initialize(PinConfigType pin);

/**************************************************************************************************************
  Pin_deinit - Функция конфигурации пина по-умолчанию
  Параметры:
            pin - Структура с информацией о пине
**************************************************************************************************************/
void Pin_default(PinConfigType pin);

/**************************************************************************************************************
  Pin_set - Установить выход пина в 1
**************************************************************************************************************/
void Pin_set(PinConfigType pin);

/**************************************************************************************************************
  Pin_reset - Установить выход пина в 0
**************************************************************************************************************/
void Pin_reset(PinConfigType pin);

/**************************************************************************************************************
  Pin_read - Чтение состояния входа пина
**************************************************************************************************************/
uint8_t Pin_read(PinConfigType pin);

/**************************************************************************************************************
  Timer_initialize - Настройка таймера TIMERx на прерывание каждые ticks тактов.
  Параметры:
            TIMERx - Таймер, который будет конфигурироваться под эту задачку (x = 1..3);
            ticks  - Количество тиков, по истечении которых будет генерироваться прерывание.
  Примечание:
            Для указания периода прерывания можно использовать определения:
              uSECOND_TICKS - микросекунда;
              mSECOND_TICKS - милисекунда;
              SECOND_TICKS - секунда.
            Пример:
              Timer_SetInterruptPeriod (MDR_TIMER2, 15 * mSECOND_TICKS);
              будет генерировать перерывание на Таймере2 каждые 15(!) милисекунд.
**************************************************************************************************************/
void Timer_initialize (MDR_TIMER_TypeDef* TIMERx, unsigned long ticks);


/**************************************************************************************************************
  Clock_initialize - Настройка тактирования процессора.
  Примечание:	
            Текущая конфигурация соответствует 80 МГц.
**************************************************************************************************************/
void Clock_initialize(void);


/**************************************************************************************************************
  ADC_initialize - Инициализация АЦП
  Параметры:
            ADCx - Используемый АЦП (ADC1/ADC2)
**************************************************************************************************************/
void ADC_initialize(ADCdev ADCx);


/**************************************************************************************************************
  ADC_getResult - Получить результат преобразования АЦП
  Параметры:
            ADCx    - Используемый АЦП (ADC1/ADC2)
            Channel - Номер канала (ADC_CH_ADCx, где x = 0..15)
**************************************************************************************************************/
uint16_t ADC_getResult (ADCdev ADCx, uint32_t Channel);


#endif
