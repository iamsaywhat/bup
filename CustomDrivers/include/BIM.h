/****************************************************************************************************

    BIM - Драйвер, предоставляющий функции нижнего уровня для работы с БИМами.
					
    БИМ - Цифровые двигатели с постоянными магнитами с редуктором. Управление 
    выполняется по CAN шине. 
					
    Особенности работы с БИМ:
    1) Тип обмена информацией с СНС - двунаправленный запрос/ответ;
    2) Скорость обмена по CAN 125кбит/с
    3) Имеется управление реле питания БИМов 
    Реализовано через макросы BIM_Supply_ON(); и BIM_Supply_OFF;
    4) Инициализирует 0-15 буфера на приём сообщений, 16-31 на передачу
    5) 0, 1 буфера резервируются этим драйвером (настроен фильтр на
    приём сообщений только от БИМ): 0 буфер - 100 ID - Левый БИМ
                                    1 буфер - 101 ID - Правый БИМ;
    Остальные доступны для использования сторонними модулями
					
    Пример работы с БИМ:
					
    // Настраиваем используемые пины 
    BIM_RetargetPins();
    // Конфигурируем CAN модуль
    BIM_CAN_init();
    // Подаём питание и разрешаем работу
    BIM_Supply_ON();
					
    // Посылаем запрос на управление: устройство 100 включить, положение стропы 255, 
    // счетчик запроса 6 (любой может быть), 
    // ограничение скорости 255, ограничение тока 200
    BIM_SendRequest (DEVICE_100, BIM_CMD_ON, 255, 6, 255, 200);
    // То же самое для устройства 101
    BIM_SendRequest (DEVICE_101, BIM_CMD_ON, 255, 6, 255, 200);		

****************************************************************************************************/
#ifndef _BIM_H_
#define _BIM_H_

#include <stdint.h>
#include "bupboard.h"

/************************************************************
  Аппаратно зависимая конфигурация
************************************************************/	
#define BAUDRATE_BIM              125000                // Cкорость обмена по CAN, бит/c
#define BIM_SEND_TIMEOUT          2                     // Таймаут на отправку сообщения, мс
#define BIM_RECEIVE_TIMEOUT       3                     // Таймаут на приём ответа, мс

// Адреса БИМ-устройств на CAN шине
#define DEVICE_100                0x100                 // Левый БИМ
#define DEVICE_101                0x101                 // Правый БИМ
#define LEFT_BIM                  0x100                 // Левый БИМ
#define RIGHT_BIM                 0x101                 // Правый БИМ

/************************************************************
  Список команд управления БИМами
************************************************************/
#define BIM_CMD_OFF								0x00    // Команда выключения          
#define BIM_CMD_ON								0x01    // Команда включения
#define BIM_CMD_REQ								0x0F    // Запрос ответа

/************************************************************
  Макросы для выделения флагов состояния
************************************************************/
#define SENSOR_FAULT             0x0001 // Отказ датчика положения 
#define OVERCURRENT              0x0002 // Превышение тока преобразователя 
#define	OVERVOLT                 0x0004 // Превышение силовое питание
#define UNDER_VOLT               0x0008 // Недостаточное силовое питание
#define OVERTEMPERATURE          0x0010	// Перегрев двигателя
#define OVERLOAD                 0x0020 // Перегруз двигателя
#define POSITION_ERR             0x0080 // Флаг рассогласования положения
#define HALT_OK                  0x0100 // Преобразователь выключен
#define RESERVED                 0x7E00 // Резерв
#define READY                    0x8000 // Флаг готовности (исправности)

#define CHECK_SENSOR_FAULT(x)       ((x&0x0001))          // Выделение флага "Отказ датчика положения"
#define CHECK_OVERCURRENT(x)        ((x&0x0002) >> 1)     // Выделение флага "Превышение тока преобразователя" 
#define	CHECK_OVERVOLT(x)           ((x&0x0004) >> 2)     // Выделение флага "Превышение силовое питание"
#define CHECK_UNDER_VOLT(x)         ((x&0x0008) >> 3)     // Выделение флага "Недостаточное силовое питание"
#define CHECK_OVERTEMPERATURE(x)    ((x&0x0010) >> 4)     // Выделение флага "Перегрев двигателя"
#define CHECK_OVERLOAD(x)           ((x&0x0020) >> 5)     // Выделение флага "Перегруз двигателя"
#define CHECK_POSITION_ERR(x)       ((x&0x0080) >> 7)     // Выделение флага "Флаг рассогласования положения"
#define CHECK_HALT_OK(x)            ((x&0x0100) >> 8)     // Выделение флага "Преобразователь выключен"
#define CHECK_READY(x)              ((x&0x8000) >> 15)    // Выделение флага "Флаг готовности (исправности)"

/************************************************************
  Структура ответа BIM
************************************************************/
typedef __packed struct{
  uint16_t  StatusFlags;        // Флаги состояния
  uint8_t   StrapPosition;      // Значение положения стропы
  uint8_t   ReqCount;           // Счетчик запроса
  uint8_t   Voltage;            // Напряжение питания
  uint8_t   Current;            // Ток двигателя
  uint8_t   Speed;              // Скорость двигателя
  uint8_t   Reserve;            // Резерв
}BIM_Response_Type;

typedef __packed union {
  BIM_Response_Type Struct;
  uint32_t          Buffer[2];
}BIM_Response_UnionType;

/**************************************************************************************************************
  BIM_Supply_ON() - Макрос подачи питания на БИМы
**************************************************************************************************************/
#define BIM_Supply_ON()    Pin_set(RELAY_BIM)

/**************************************************************************************************************
  BIM_Supply_OFF() - Макрос отключения питания на БИМа
**************************************************************************************************************/
#define BIM_Supply_OFF()    Pin_reset(RELAY_BIM)

/**************************************************************************************************************
  BIM_CAN_init - Инициализация драйвера для работы с БИМами по CAN протоколу
  Параметры:  NONE	
**************************************************************************************************************/
void BIM_CAN_init (void);

/**************************************************************************************************************
  BIM_SendRequest - Функция отправки запроса БИМам с командами
  Параметры:
            DeviceID       - Адрес БИМа на CAN шине
            CMD            - Команда (BIM_CMD_ON, BIM_CMD_OFF или BIM_CMD_REQ)
            StrapPosition  - Положение стропы (0..255)
            ReqCount       - Счетчик опроса (индентификатор запроса)
            SpeedLimit     - Ограничение скорости двигателя (0..255)
            CurrentLimit   - Ограничение тока (0..255)
    
  Возвращает: 
            0 - Если ошибка при передаче (таймаут передачи)
            1 - Если отправлено успешно	 		
**************************************************************************************************************/
uint8_t BIM_SendRequest (uint16_t DeviceID, 
                         uint8_t  CMD, 
                         uint8_t  StrapPosition, 
                         uint8_t  ReqCount, 
                         uint8_t  SpeedLimit, 
                         uint8_t  CurrentLimit);

/**************************************************************************************************************
  BIM_CheckConnection - Проверка связи с БИМами
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства												
  Возвращает: 
            0 - Связь нарущена
            1 - Связь с БИМом в порядке	 		
**************************************************************************************************************/
uint8_t BIM_CheckConnection (uint16_t DeviceID);

/**************************************************************************************************************
  BIM_GetStrapPosition - Получить текущее положение стропы
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства.
  Возвращает: Положение стропы устройства с DeviceID.
**************************************************************************************************************/
uint8_t BIM_GetStrapPosition (uint16_t DeviceID);

/**************************************************************************************************************
  BIM_GetVoltage - Получить текущее значение напряжения
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства.
  Возвращает:
            Текущее значение напряжения.
**************************************************************************************************************/
uint8_t BIM_GetVoltage (uint16_t DeviceID);

/**************************************************************************************************************
  BIM_GetCurrent - Получить текущее значение тока
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства
  Возвращает:
            Текущее значение тока
**************************************************************************************************************/
uint8_t BIM_GetCurrent (uint16_t DeviceID);

/**************************************************************************************************************
  BIM_GetSpeed - Получить текущее значение скорости
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства.
  Возвращает:
            Текущее значение скорости.
**************************************************************************************************************/
uint8_t BIM_GetSpeed (uint16_t DeviceID);

/**************************************************************************************************************
  BIM_GetStatusFlags - Получить актуальные флаги состояния устройства  
  Параметры:
            DeviceID 	- Идентификатор БИМ-устройства.
  Возвращает:
            Актуальные флаги состояния устройства.
**************************************************************************************************************/
uint8_t BIM_GetStatusFlags (uint16_t DeviceID);

#endif
