#ifndef _OTHERLIB_H_
#define _OTHERLIB_H_

#include <stdint.h>
#include "MDR32F9Qx_port.h"
#include "MDR32F9Qx_timer.h"



#define uSECOND_TICKS     80
#define mSECOND_TICKS     80000
#define  SECOND_TICKS     80000000



typedef enum{ 
	FAILED = 0, 
	PASSED = !FAILED
}OperationStatus; 

typedef enum {
	ADC1 = 1,
	ADC2 = 2,
}ADCdev;

typedef struct{
	uint64_t start;
	uint64_t stop;
}TimeoutType;

typedef enum{
	TIME_IS_UP,
	TIME_IS_NOT_UP
}TimeoutStatus;


/****************************************************************************************
    SysTick_init - Инициализация SysTick таймера с периодом прерывания 1 мс
		               при частоте тактирования 80МГц
****************************************************************************************/
void SysTick_init(void);

/****************************************************************************************
    getCurrentSystemTime - Узнать системное время (милисекунды с момента включения)
    Возвращает:
                Системное время в милисекундах с момента включения
****************************************************************************************/
uint64_t getCurrentSystemTime(void);

/****************************************************************************************
    setTimeout - Установить таймаут в милисекундах
    Параметры:
                timeout     - Указатель на структуру
                millisecond - Величина таймаута в милисекундах
****************************************************************************************/
void setTimeout (TimeoutType* timeout, uint32_t millisecond);

/****************************************************************************************
    timeoutStatus - Проверить истекло ли время ожидания
    Параметры:
                timeout - Указатель на структуру
    Возвращает:
                Статус таймаута
****************************************************************************************/
TimeoutStatus timeoutStatus(TimeoutType* timeout);

/**************************************************************************************************************
    delay_ms - Функция задержки в мс
    Параметры:
                ms - Величина задержки в милисекундах
**************************************************************************************************************/
void delay_ms(uint32_t ms);

/**************************************************************************************************************
    delay_us - Функция задержки в мкс
    Параметры:
                us - Величина задержки в микросекундах
**************************************************************************************************************/
void delay_us(uint32_t us);

/**************************************************************************************************************
    Pin_init - Функция конфигурации отдельных пинов порта
    Параметры:
                PORTx - где x может быть (A..F): Используемый порт
                Pin_Num - PORT_Pin_x, где x может быть (1,...,15,ALL): Номер пина
                Port_Func - PORT_FUNC_x, где x может быть(PORT,MAIN,ALTER,OVERRID): Назначаемая функция
                Port_OE - PORT_OE_x, где x может быть(IN, OUT): Настройка на вход/выход
***************************************************************************************************************/
void Pin_init(MDR_PORT_TypeDef* PORTx, uint32_t Pin_Num, PORT_FUNC_TypeDef Port_Func, PORT_OE_TypeDef Port_OE);


/**************************************************************************************************************
    Timer_SetInterruptPeriod - Настройка таймера TIMERx на прерывание каждые ticks тактов.
    Параметры:
                TIMERx - Таймер, который будет конфигурироваться под эту задачку (x = 1..3);
                ticks  - Количество тиков, по истечении которых будет генерироваться прерывание.
                Примечание:
                    Для указания периода прерывания можно использовать определения:
                        uSECOND_TICKS - микросекунда;
                        mSECOND_TICKS - милисекунда;
                        SECOND_TICKS - секунда.
                    Пример:
                        Timer_SetInterruptPeriod (MDR_TIMER2, 15 * mSECOND_TICKS);
                        будет генерировать перерывание на Таймере2 каждые 15(!) милисекунд.
**************************************************************************************************************/
void Timer_SetInterruptPeriod (MDR_TIMER_TypeDef* TIMERx, unsigned long ticks);


/**************************************************************************************************************
    Clock_init - Настройка тактирования процессора.
    Примечание:	
                Текущая конфигурация соответствует 80 МГц.
**************************************************************************************************************/
void Clock_init(void);


/**************************************************************************************************************
    ADC_init - Инициализация АЦП
    Параметры:
                ADCx - Используемый АЦП (ADC1/ADC2)
                Pins - Пины используемые под АЦП (PORT_Pin_x, где x = 0..15, либо ALL)
    Примечание: 
                В Pins можно перечислить несколько пинов, 
                например PORT_Pin_0 || PORT_Pin_1 ||  PORT_Pin_15
**************************************************************************************************************/
void ADC_init(ADCdev ADCx, uint32_t Pins);


/**************************************************************************************************************
    ADC_GetResult - Получить результат преобразования АЦП
    Параметры:
                ADCx    - Используемый АЦП (ADC1/ADC2)
                Channel - Номер канала (ADC_CH_ADCx, где x = 0..15)
**************************************************************************************************************/
uint16_t ADC_GetResult (ADCdev ADCx, uint32_t Channel);


#endif
