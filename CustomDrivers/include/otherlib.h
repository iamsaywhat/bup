#ifndef _OTHERLIB_H_
#define _OTHERLIB_H_

#include <stdint.h>
#include "MDR32F9Qx_port.h"
#include "MDR32F9Qx_timer.h"



#define uSECOND_TICKS     80
#define mSECOND_TICKS     80000
#define  SECOND_TICKS     80000000


typedef enum { 
    FAILED = 0, 
    PASSED = !FAILED
 }OperationStatus; 

typedef enum {
    ADC1 = 1,
    ADC2 = 2,
}ADCdev;

/**************************************************************************************************************
    delay_us - Функция задержки в мкс.
    Параметры:  us - Время задежки в микросекундах
    Примечание: Реализован на SysTick без использования прерываний
***************************************************************************************************************/
void delay_us (uint32_t us);
	

/**************************************************************************************************************
    Pin_Init - Функция конфигурации отдельных пинов порта
    Параметры:
                PORTx - где x может быть (A..F): Используемый порт
                Pin_Num - PORT_Pin_x, где x может быть (1,...,15,ALL): Номер пина
                Port_Func - PORT_FUNC_x, где x может быть(PORT,MAIN,ALTER,OVERRID): Назначаемая функция
                Port_OE - PORT_OE_x, где x может быть(IN, OUT): Настройка на вход/выход
***************************************************************************************************************/
void Pin_Init(MDR_PORT_TypeDef* PORTx, uint32_t Pin_Num, PORT_FUNC_TypeDef Port_Func, PORT_OE_TypeDef Port_OE);


/**************************************************************************************************************
    Timer_SetInterruptPeriod - Настройка таймера TIMERx на прерывание каждые ticks тактов.
    Параметры:
                TIMERx - Таймер, который будет конфигурироваться под эту задачку (x = 1..3);
                ticks  - Количество тиков, по истечении которых будет генерироваться прерывание.
                Примечание:
                    Для указания периода прерывания можно использовать определения:
                        uSECOND_TICKS - микросекунда;
                        mSECOND_TICKS - милисекунда;
                        SECOND_TICKS - секунда.
                    Пример:
                        Timer_SetInterruptPeriod (MDR_TIMER2, 15 * mSECOND_TICKS);
                        будет генерировать перерывание на Таймере2 каждые 15(!) милисекунд.
**************************************************************************************************************/
void Timer_SetInterruptPeriod (MDR_TIMER_TypeDef* TIMERx, unsigned long ticks);


/**************************************************************************************************************
    InitCLK - Настройка тактирования процессора.
    Примечание:	
                Текущая конфигурация соотвествует 80 МГц.
**************************************************************************************************************/
void InitCLK(void);


/**************************************************************************************************************
    ADC_init - Инициализация АЦП
    Параметры:
                ADCx - Используемый АЦП (ADC1/ADC2)
                Pins - Пины используемые под АЦП (PORT_Pin_x, где x = 0..15, либо ALL)
    Примечание: 
                В Pins можно перечислить несколько пинов, 
                например PORT_Pin_0 || PORT_Pin_1 ||  PORT_Pin_15
**************************************************************************************************************/
void ADC_init(ADCdev ADCx, uint32_t Pins);


/**************************************************************************************************************
    ADC_GetResult - Получить результат преобразования АЦП
    Параметры:
                ADCx    - Используемый АЦП (ADC1/ADC2)
                Channel - Номер канала (ADC_CH_ADCx, где x = 0..15)
**************************************************************************************************************/
uint16_t ADC_GetResult (ADCdev ADCx, uint32_t Channel);


#endif
