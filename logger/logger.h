/***************************************************************************		
  logger - Модуль, задающий формат записи лога
  
  Лог пишется в формате основанном на JSON, где каждая строка JSON-объект;
  Всего предусмотрено 5 типов сообщений:
  1) warning - Предупреждения
  2) error - Ошибки
  3) point - Данные типа точка (широта, долгота, высота)
  4) series - Серии точек для построения графиков
  5) track - Траектория

  Формат:
  1) Препреждения:
		{"time":<СИСТЕМНОЕ_ВРЕМЯ_В_МС>,"warning":"<ТЕКСТ_ПРЕДУПРЕЖДЕНИЯ>"}
	Пример: 
		{"time":5151,"warning":"pin1: not inserted"}
		
  2) Ошибки 
		{"time":<СИСТЕМНОЕ ВРЕМЯ В МС>,"warning":"<ТЕКСТ_ОШИБКИ>"}
	Пример:
		{"time":26967,"warning":"radio: not connected"}
		
  3) Данные типа точка:
		{"time":<СИСТЕМНОЕ ВРЕМЯ В МС>,"point":["<УНИКАЛЬНОЕ_ИМЯ",<ШИРОТА>,<ДОЛГОТА>,<ВЫСОТА>]}
	Пример:
		{"time":5147,"point":["td",45.099447,35.772279,750.00]}
	
  4) Серии точек для построения графиков
		{"time":<СИСТЕМНОЕ ВРЕМЯ В МС>,"series":["<УНИКАЛЬНОЕ_ИМЯ>",<ШАГ_МАТМОДЕЛИ>,<ВЕЛИЧИНА>]}
	Пример:
		{"time":74314,"series":["velocity_lat",2,-19.671429]}
		
  5) Серии точек для построения графиков
		{"time":<СИСТЕМНОЕ ВРЕМЯ В МС>,"track":[<ШАГ_МАТМОДЕЛИ>,<ШИРОТА>,<ДОЛГОТА>,<ВЫСОТА>]}
	Пример:
		{"time":73217,"track":[1,45.105641,35.774877,1616.00]}
		
  Примечание: Предупреждениями выводятся некритичные сообщения либо системные события. 
  Ошибками выводятся критичные события в системе, например отказы. "Точки" это либо точка полетного задания,
  либо точки фактического приземления, либо точки полетного задания полученные от радиостанции.
  Серией точек могут быть любые данные, которые необходимо представить в виде графика; Для того, чтобы это сделать
  необходимо во всем файле отсортировать объекты типа series по уникальному имени;
  Чтобы привязать данные ко времени, можно использовать системеное время (метка time), шаг матмодели 
  (он равен 1с), тогда данные будут привязаны по времени к началу управления; так же по шагу матмодели можно
  синхронизировать данные разных серий (так как возможны пропуски в на некоторых шагах)
***************************************************************************/
#ifndef _LOG_RECORDER_H_
#define _LOG_RECORDER_H_

#include <stdint.h>

/************************************************************************************
  logger_openNewSession - Открытие сессии логирования
************************************************************************************/
void logger_openNewSession(void);

/************************************************************************************
  logger_closeSession - Закрытие сессии логирования
************************************************************************************/
void logger_closeSession(void);

/************************************************************************************
  logger_warning - Запись предупреждения в лог
  Параметры:
            string - Текст предупреждения 
************************************************************************************/
void logger_warning (char* string);

/************************************************************************************
  logger_error - Запись ошибки в лог
  Параметры:
            string - Текст ошибки 
************************************************************************************/
void logger_error (char* string);

/************************************************************************************
  logger_point - Запись объекта типа точка в лог
  Параметры:
            name - Уникальное имя объекта
            latitude - Широта точки
            longitute - Долгота точки 
            altitude - Высота точки	
************************************************************************************/
void logger_point (char* name, double latitude, double longitute, double altitude);

/************************************************************************************
  logger_track - Запись точки траектории
  Параметры:
            latitude - Широта точки
            longitute - Долгота точки 
            altitude - Высота точки	
************************************************************************************/
void logger_track (double latitude, double longitude, double altitude);

/************************************************************************************
  logger_series - Запись серии данных
  Модификаторы:
                f - Максимальное число знаков после запятой
                f0 - Обросить знаки после запятой
                f2 -  Два знака после запятой
                lld - Для целочисленных value со знаком
                llu - Для целочисленного value без знака 				
  Параметры:
            name - Уникальное имя серии данных
            value - Значение 
************************************************************************************/
void logger_series_f (char* name, double value);
void logger_series_f0 (char* name, double value);
void logger_series_f2 (char* name, double value);
void logger_series_lld (char* name, int64_t value);
void logger_series_llu (char* name, uint64_t value);


#endif
