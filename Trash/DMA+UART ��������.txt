/*******************************



#include "main.h"

int main(void)
{	
//------------Инициализация-----------------
			int i = 948;
			__disable_irq();
			InitCLK();
			InitPort();
			InitUART();
			enginesTurnOn();
			flightRegulatorCFB_initialize();
			initCan();
			InitTimer();
			InitDAC();
			//__enable_irq();
	    PORT_WriteBit(ReleBIMsEnable.PORTx,ReleBIMsEnable.Pin,(BitAction)1 );
	
#ifndef OTLAD
			PORT_WriteBit(Rele1.PORTx,Rele1.Pin,(BitAction)1 );
			PORT_WriteBit(Rele2.PORTx,Rele2.Pin,(BitAction)1 );
			PORT_WriteBit(Rele3.PORTx,Rele3.Pin,(BitAction)1 );
			PORT_WriteBit(Rele4.PORTx,Rele4.Pin,(BitAction)1 );
#endif
			
			printf("Hello world! %d\n", i);
			printf("%d\n", i);


			while(1)
			{				
//			if(RXStr1.fSymb)
//			{	
//				RXStr1.fSymb=0; 
//				for(i=0;i<200;i++){
//					TXStr1.XBUF[i] = i;
//				}
				//UART_SendDataStr(nUART,&TXStr1,i);
			
//			}	
		//	while(CAN_GetStatus(nCAN));
			
			//PORT_WriteBit(ReleBIMsEnable.PORTx,ReleBIMsEnable.Pin,(BitAction)1 );
			}
}





*/


/**
  ******************************************************************************
  * @file    Examples/MDR32F9Q3_EVAL/DMA/UART_RAM/main.c
  * @author  Milandr Application Team
  * @version V1.2.0
  * @date    04/07/2011
  * @brief   Main program body.
  ******************************************************************************
  * <br><br>
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, MILANDR SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2011 Milandr</center></h2>
  */

/* Includes ------------------------------------------------------------------*/
#include "MDR32F9Qx_config.h"
#include "MDR32Fx.h"
#include "MDR32F9Qx_uart.h"
#include "MDR32F9Qx_rst_clk.h"
#include "MDR32F9Qx_dma.h"
#include "MDR32F9Qx_port.h"

/** @addtogroup __MDR32F9Qx_StdPeriph_Examples MDR32F9Qx StdPeriph Examples
  * @{
  */

/** @addtogroup __MDR32F9Q3_EVAL MDR32F9Q3 Evaluation Board
  * @{
  */

/** @addtogroup DMA_UART_RAM_93 DMA_UART_RAM
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
typedef enum { FAILED = 0, PASSED = !FAILED} TestStatus;

/* Private define ------------------------------------------------------------*/
#define BufferSize         256

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
DMA_ChannelInitTypeDef DMA_InitStr;
DMA_CtrlDataInitTypeDef DMA_PriCtrlStr;
UART_InitTypeDef sUART;
PORT_InitTypeDef PORT_InitStructure;

uint8_t SrcBuf1[BufferSize];
uint8_t SrcBuf2[BufferSize];
uint8_t DstBuf1[BufferSize];
uint8_t DstBuf2[BufferSize];

volatile TestStatus TransferStatus1 = FAILED, TransferStatus2 = FAILED;

/* Private function prototypes -----------------------------------------------*/
void Init_RAM (uint16_t *addr, uint32_t size);
uint32_t ps_rand(uint32_t addr);
TestStatus Verif_mem (uint32_t BufSize, uint16_t *pBuffer1, uint16_t *pBuffer2);

//  Доступ к таблице управляющих структур каналов, основных и альтернативных
//  Сама структура объявлена и используется в библиотечном файле MDR32F9Qx_dma.c
extern DMA_CtrlDataTypeDef DMA_ControlTable[DMA_Channels_Number * (1 + DMA_AlternateData)];


typedef struct{
	uint32_t Handler;
	uint32_t Counter;
	float StaticPressure;
	float DynamicPressure;
	float AbsoluteHeight;
	float InstrumentSpeed;
	float TrueSpeed;
	uint32_t Reserved[5];
	uint32_t StateFlags;
	uint32_t CRC;
}SWS_Packet;








void DMA_IRQHandler(void)
{	
	// Конец цикла DMA на канале UART2_RX?
	if(!DMA_GetFlagStatus(DMA_Channel_UART2_RX, DMA_FLAG_CHNL_ENA))
	{	
		// Обновляем таблицу DMA для перезапуска цикла
		DMA_ControlTable[DMA_Channel_UART2_RX].DMA_Control = (     DMA_DestIncByte            |
																															 DMA_MemoryDataSize_Byte    |
																															 DMA_SourceIncNo            |
																															 DMA_DestPrivileged         |
																															 DMA_SourcePrivileged       |
																															 DMA_Transfers_1            |
																															 ((BufferSize-1)<<4)				|
		       																										 DMA_Mode_Basic);
		// Перезапускаем цикл DMA
		MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel_UART2_RX);
	}
	// Сбрасываем флаг прерывания
	NVIC_ClearPendingIRQ (DMA_IRQn);
}

uint8_t Init_Clock(void)
{
	uint32_t timeout = 100000;

  // убрать тактирование блоков, кроме самих блоков тактирования
  MDR_RST_CLK -> PER_CLOCK   = RST_CLK_PCLK_RST_CLK  | RST_CLK_PCLK_BKP;

  // включить генератор на внешнем кварце
  MDR_RST_CLK -> HS_CONTROL  = RST_CLK_HS_CONTROL_HSE_ON;

  //подождать пока он установится

  while( --timeout)
  {
      if( MDR_RST_CLK -> CLOCK_STATUS & RST_CLK_CLOCK_STATUS_HSE_RDY ) break;
  }
  // если таймер досчитал до нуля - значит у генератора проблемы
  if( 0 == timeout ) return 1;

  // запускаем умножитель частоты ядра (PLL)
  MDR_RST_CLK -> PLL_CONTROL  = RST_CLK_PLL_CONTROL_PLL_CPU_ON ;

    //подождать пока он установится
  timeout = 100000UL;
  while( --timeout)
  {
      if( MDR_RST_CLK -> CLOCK_STATUS & RST_CLK_CLOCK_STATUS_PLL_CPU_RDY ) break;
  }
  // если таймер досчитал до нуля - значит у генератора проблемы
  if( 0 == timeout ) return 2;

  // переключаем источник тактирования ядра
  // HCLK = CPU_C3 = CPU_C2 = PLLCPU; PLL = C1*(MUL+1); CPU_C1 = HSE
  MDR_RST_CLK -> CPU_CLOCK = (1UL << RST_CLK_CPU_CLOCK_HCLK_SEL_Pos) |
      (2UL << RST_CLK_CPU_CLOCK_CPU_C1_SEL_Pos);

  // установка адреса таблицы прерываний
  SCB->VTOR = 0x08000000;

  return 0;  // нулевой код ошибки - значит нет ошибки
}

/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
#ifdef __CC_ARM
int main(void)
#else
void main(void)
#endif
{	
	
	RST_CLK_DeInit();
  RST_CLK_HSEconfig(RST_CLK_HSE_ON);
  RST_CLK_CPU_PLLconfig (RST_CLK_CPU_PLLsrcHSEdiv1,0);
  RST_CLK_CPU_PLLuse(ENABLE);
  Init_Clock();
	
	/* Подача такта на эти модули НЕОБХОДИМА для корректной работы модуля DMA,
    * поскольку будучи отключенными они удерживают активный уровень на запросе
    * обслуживания DMA */
	 RST_CLK_PCLKcmd((RST_CLK_PCLK_SSP1 | RST_CLK_PCLK_SSP2),ENABLE);
   //MDR_RST_CLK->PER_CLOCK |= RST_CLK_PER_CLOCK_SSP1_EN | RST_CLK_PER_CLOCK_SSP2_EN;
   /* модули SSP1 и SSP2 возводили в активный уровень запрос на прерывание по DMA,
    * поэтому его нужно стереть перед разрешением, чтобы он не провалился в прерывание */
   NVIC_ClearPendingIRQ(DMA_IRQn);
	
  /* Enable peripheral clocks --------------------------------------------------*/
  RST_CLK_PCLKcmd((RST_CLK_PCLK_RST_CLK | RST_CLK_PCLK_UART2 | RST_CLK_PCLK_DMA),ENABLE);
  RST_CLK_PCLKcmd((RST_CLK_PCLK_PORTA | RST_CLK_PCLK_PORTB| RST_CLK_PCLK_PORTF), ENABLE);

  /* Init NVIC */
  //SCB->AIRCR = 0x05FA0000 | ((uint32_t)0x500);
  //SCB->VTOR = 0x08000000;
  /* Disable all interrupt */
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICER[0] = 0xFFFFFFFF;

  /* Disable all DMA request */
  MDR_DMA->CHNL_REQ_MASK_CLR = 0xFFFFFFFF;
  MDR_DMA->CHNL_USEBURST_CLR = 0xFFFFFFFF;

  /* Reset PORTD settings */
  PORT_DeInit(MDR_PORTF);

  /* Configure UART1 pins: RXD, TXD */

  /* Configure PORTB pins 5, 6 */
  PORT_InitStructure.PORT_Pin   = PORT_Pin_0;
  PORT_InitStructure.PORT_OE    = PORT_OE_IN;
  PORT_InitStructure.PORT_FUNC  = PORT_FUNC_OVERRID;
  PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
  PORT_InitStructure.PORT_SPEED = PORT_SPEED_FAST;
  PORT_Init(MDR_PORTF, &PORT_InitStructure);
  PORT_InitStructure.PORT_Pin   = PORT_Pin_1;
  PORT_InitStructure.PORT_OE    = PORT_OE_OUT;
  PORT_Init(MDR_PORTF, &PORT_InitStructure);

//  // RS485 direction control pin
//  PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
//  PORT_InitStructure.PORT_Pin   = PORT_Pin_7;
//  PORT_InitStructure.PORT_OE    = PORT_OE_OUT;
//  PORT_Init(MDR_PORTA, &PORT_InitStructure);
//  PORT_ResetBits(MDR_PORTA, PORT_Pin_7);

  /* Init RAM */
  /*Init_RAM (DstBuf1, BufferSize);
  Init_RAM (SrcBuf1, BufferSize);
  Init_RAM (DstBuf2, BufferSize);
  Init_RAM (SrcBuf2, BufferSize);*/

  /* Reset all UART settings */
  UART_DeInit(MDR_UART2);

  UART_BRGInit(MDR_UART2,UART_HCLKdiv1);

  /* UART1 configuration ------------------------------------------------*/
  UART_StructInit (&sUART);

  sUART.UART_BaudRate                           = 9600;
  sUART.UART_WordLength                         = UART_WordLength8b;
  sUART.UART_StopBits                           = UART_StopBits1;
  sUART.UART_Parity                             = UART_Parity_No;
  sUART.UART_FIFOMode                           = UART_FIFO_ON;
  sUART.UART_HardwareFlowControl                = (UART_HardwareFlowControl_RXE | \
                                                   UART_HardwareFlowControl_TXE );
  UART_Init (MDR_UART2,&sUART);
  UART_DMAConfig(MDR_UART2,UART_IT_FIFO_LVL_8words,UART_IT_FIFO_LVL_8words);

  /* Enable UART1 DMA Rx and Tx request */
  UART_DMACmd(MDR_UART2,( UART_DMA_RXE /*| UART_DMA_TXE*/), ENABLE);

  /* Reset all DMA settings */
  DMA_DeInit();
  DMA_StructInit(&DMA_InitStr);

  /* DMA_Channel_UART1_RX configuration ---------------------------------*/
  /* Set Primary Control Data */
  DMA_PriCtrlStr.DMA_SourceBaseAddr = (uint32_t)(&(MDR_UART2->DR));
  DMA_PriCtrlStr.DMA_DestBaseAddr = (uint32_t)DstBuf1;
  DMA_PriCtrlStr.DMA_SourceIncSize = DMA_SourceIncNo;
  DMA_PriCtrlStr.DMA_DestIncSize = DMA_DestIncByte;
  DMA_PriCtrlStr.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_PriCtrlStr.DMA_Mode = DMA_Mode_Basic;
  DMA_PriCtrlStr.DMA_CycleSize = BufferSize;
  DMA_PriCtrlStr.DMA_NumContinuous = DMA_Transfers_1;
  DMA_PriCtrlStr.DMA_SourceProtCtrl = DMA_SourcePrivileged;
  DMA_PriCtrlStr.DMA_DestProtCtrl = DMA_DestPrivileged;
  /* Set Channel Structure */
  DMA_InitStr.DMA_PriCtrlData = &DMA_PriCtrlStr;
  DMA_InitStr.DMA_Priority = DMA_Priority_High;
  DMA_InitStr.DMA_UseBurst = DMA_BurstClear;
  DMA_InitStr.DMA_SelectDataStructure = DMA_CTRL_DATA_PRIMARY;
  /* Init DMA channel */
  DMA_Init(DMA_Channel_UART2_RX, &DMA_InitStr);


  /* DMA_Channel_UART1_TX configuration ---------------------------------*/
  /* Set Primary Control Data */
//  DMA_PriCtrlStr.DMA_SourceBaseAddr = (uint32_t)SrcBuf1;
//  DMA_PriCtrlStr.DMA_DestBaseAddr = (uint32_t)(&(MDR_UART2->DR));
//  DMA_PriCtrlStr.DMA_SourceIncSize = DMA_SourceIncByte;
//  DMA_PriCtrlStr.DMA_DestIncSize = DMA_DestIncNo;
//  DMA_InitStr.DMA_Priority = DMA_Priority_Default;
//  /* Init DMA channel */
//  DMA_Init(DMA_Channel_UART2_TX, &DMA_InitStr);

//	MDR_RST_CLK -> PER_CLOCK |= RST_CLK_PCLK_SSP2 | RST_CLK_PCLK_SSP1  ;
//	MDR_SSP1->DMACR=0;
//	MDR_SSP2->DMACR=0;
//	MDR_RST_CLK->PER_CLOCK &= ~ (RST_CLK_PCLK_SSP2  | RST_CLK_PCLK_SSP2  ); //разрешить частоты SPI1-SPI3

  /* Enable UART1 */
  UART_Cmd(MDR_UART2,ENABLE);
	NVIC_EnableIRQ(DMA_IRQn);

  /* Transfer complete */
/*  while((DMA_GetFlagStatus(DMA_Channel_UART1_TX, DMA_FLAG_CHNL_ENA)))
  {
  }*/
  while((DMA_GetFlagStatus(DMA_Channel_UART2_RX, DMA_FLAG_CHNL_ENA)))
  {
  }


  while(1)
  {
  }
}

/**
  * @brief  Initialisation memory pseudo random value
  * @param  addr - memory address
  * @param  size - memory size
  * @retval None
  */
void Init_RAM (uint16_t *addr, uint32_t size)
{
uint32_t i;

  for (i = 0; i < size; i++)
  {
    *addr++ = ps_rand((uint32_t)addr) + (i*4);
  }
}

/**
  * @brief  Generation random values
  * @param  addr:
  * @retval random value
  */
uint32_t ps_rand(uint32_t addr)
{
uint32_t hash = 0;
uint32_t i;
char * key = (char *)&addr;

  for (i = 0; i < 4; i++)
  {
    hash += key[i];
    hash += (hash << 10);
    hash ^= (hash >> 6);
  }

  for (i = 0; i < 256; i++)
  {
    hash += (hash << 10);
    hash ^= (hash >> 6);
  }

  hash += (hash << 3);
  hash ^= (hash >> 11);
  hash += (hash << 15);

  return hash;
}

/**
  * @brief  Compares two buffers.
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufSize: buffer's size
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Verif_mem (uint32_t BufSize, uint16_t *pBuffer1, uint16_t *pBuffer2)
{
uint32_t i;

  for(i = 0; i < BufSize; i++)
  {
    if (*pBuffer1++ != *pBuffer2++)
    {
      return(FAILED);
    }
  }

return(PASSED);
}

/**
  * @brief  Reports the source file ID, the source line number
  *         and expression text (if USE_ASSERT_INFO == 2) where
  *         the assert_param error has occurred.
  * @param  file_id: pointer to the source file name
  * @param  line: assert_param error line source number
  * @param  expr:
  * @retval None
  */
#if (USE_ASSERT_INFO == 1)
void assert_failed(uint32_t file_id, uint32_t line)
{
  /* User can add his own implementation to report the source file ID and line number.
     Ex: printf("Wrong parameters value: file Id %d on line %d\r\n", file_id, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#elif (USE_ASSERT_INFO == 2)
void assert_failed(uint32_t file_id, uint32_t line, const uint8_t* expr);
{
  /* User can add his own implementation to report the source file ID, line number and
     expression text.
     Ex: printf("Wrong parameters value (%s): file Id %d on line %d\r\n", expr, file_id, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif /* USE_ASSERT_INFO */

/** @} */ /* End of group DMA_UART_RAM_93 */

/** @} */ /* End of group __MDR32F9Q3_EVAL */

/** @} */ /* End of group __MDR32F9Qx_StdPeriph_Examples */

/******************* (C) COPYRIGHT 2011 Milandr *********/

/* END OF FILE main.c */
